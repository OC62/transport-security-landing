<?php
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ù–ò–ß–ï–ì–û –Ω–µ—Ç –ø–µ—Ä–µ–¥ —ç—Ç–∏–º (–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, BOM, –≤—ã–≤–æ–¥–∞)

// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ CORS
header('Access-Control-Allow-Origin: https://xn----9sb8ajp.xn--p1ai');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Access-Control-Allow-Credentials: true');
header('Content-Type: application/json');

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤ (OPTIONS)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['status' => 'error', 'message' => '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω']);
    exit;
}

// –ü—É—Ç—å –∫ autoload.php
$autoloadPath = __DIR__ . '/vendor/autoload.php';
if (!file_exists($autoloadPath)) {
    http_response_code(500);
    echo json_encode([
        'status' => 'error',
        'message' => '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑—á–∏–∫ Composer –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ "composer install".'
    ]);
    exit;
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Composer
require_once $autoloadPath;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ require, –±–µ–∑ –≤—ã–≤–æ–¥–∞)
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
use Dotenv\Dotenv;

try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    $dotenv = Dotenv::createImmutable(__DIR__);
    $dotenv->load();

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    $SMTP_HOST = $_ENV['SMTP_HOST'] ?? getenv('SMTP_HOST');
    $SMTP_PORT = (int)($_ENV['SMTP_PORT'] ?? getenv('SMTP_PORT'));
    $SMTP_USER = $_ENV['SMTP_USER'] ?? getenv('SMTP_USER');
    $SMTP_PASS = $_ENV['SMTP_PASS'] ?? getenv('SMTP_PASS');
    $FROM_NAME = $_ENV['FROM_NAME'] ?? '–°–∞–π—Ç –ü–¢–ë-–ú';
    $TO_EMAIL = $_ENV['TO_EMAIL'] ?? $_ENV['SMTP_USER'];
    $CAPTCHA_SECRET = $_ENV['CAPTCHA_SECRET'] ?? getenv('CAPTCHA_SECRET');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    $requiredEnv = ['SMTP_HOST', 'SMTP_PORT', 'SMTP_USER', 'SMTP_PASS', 'CAPTCHA_SECRET'];
    foreach ($requiredEnv as $key) {
        if (empty($$key)) {
            throw new Exception("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $key");
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    $input = json_decode(file_get_contents('php://input'), true);
    if (!is_array($input)) {
        throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è JSON');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ (–Ø–Ω–¥–µ–∫—Å SmartCaptcha)
    $captchaToken = $input['smartcaptcha_token'] ?? '';
    if (empty($captchaToken)) {
        throw new Exception('–¢–æ–∫–µ–Ω –∫–∞–ø—á–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
    }

    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => 'https://smartcaptcha.yandexcloud.net/validate',
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => http_build_query([
            'secret' => $CAPTCHA_SECRET,
            'token' => $captchaToken,
            'ip' => $_SERVER['REMOTE_ADDR']
        ]),
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 10,
        CURLOPT_SSL_VERIFYPEER => true,
        CURLOPT_SSL_VERIFYHOST => 2,
    ]);
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($httpCode !== 200) {
        throw new Exception("–û—à–∏–±–∫–∞ –∫–∞–ø—á–∏: HTTP $httpCode");
    }

    $result = json_decode($response, true);
    if (!isset($result['status']) || $result['status'] !== 'ok') {
        throw new Exception('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    $requiredFields = ['name', 'email', 'phone', 'message'];
    foreach ($requiredFields as $field) {
        if (empty($input[$field]) || !is_string($input[$field])) {
            throw new Exception("–ü–æ–ª–µ '$field' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
        }
        $input[$field] = trim(strip_tags($input[$field]));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!filter_var($input['email'], FILTER_VALIDATE_EMAIL)) {
        throw new Exception('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ PHPMailer
    $mail = new PHPMailer(true);
    $mail->isSMTP();
    $mail->Host       = $SMTP_HOST;
    $mail->SMTPAuth   = true;
    $mail->Username   = $SMTP_USER;
    $mail->Password   = $SMTP_PASS;
    $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
    $mail->Port       = $SMTP_PORT;
    $mail->CharSet    = 'UTF-8';

    $mail->setFrom($SMTP_USER, $FROM_NAME);
    $mail->addAddress($TO_EMAIL);

    $mail->isHTML(true);
    $mail->Subject = 'üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ü–¢–ë-–ú';
    $mail->Body = "
        <h2>üì¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
        <p><strong>–ò–º—è:</strong> " . htmlspecialchars($input['name']) . "</p>
        <p><strong>Email:</strong> " . htmlspecialchars($input['email']) . "</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> " . htmlspecialchars($input['phone']) . "</p>
        <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong><br>" . nl2br(htmlspecialchars($input['message'])) . "</p>
        <hr>
        <p><small><strong>IP:</strong> {$_SERVER['REMOTE_ADDR']}</small></p>
        <p><small><strong>–í—Ä–µ–º—è:</strong> " . date('d.m.Y H:i:s') . "</small></p>
    ";

    $mail->send();

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    http_response_code(200);
    echo json_encode([
        'status' => 'success',
        'message' => '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    ]);

} catch (Exception $e) {
    error_log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'status' => 'error',
        'message' => '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ $e->getMessage() –∫–ª–∏–µ–Ω—Ç—É
    ]);
}