import { useState, useEffect, useRef, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import GlassmorphicButton from '../ui/GlassmorphicButton';

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
const schema = yup.object({
  name: yup.string().required('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  email: yup.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email').required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  phone: yup.string().required('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  message: yup.string().required('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
}).required();

// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ .env (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å VITE_)
const BACKEND_ENDPOINT = import.meta.env.VITE_BACKEND_ENDPOINT;
const CAPTCHA_SITE_KEY = import.meta.env.VITE_CAPTCHA_SITE_KEY;

const ContactForm = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const [captchaToken, setCaptchaToken] = useState('');
  const [captchaError, setCaptchaError] = useState('');
  const captchaContainerRef = useRef(null);
  const widgetId = useRef(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset
  } = useForm({
    resolver: yupResolver(schema)
  });

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
  useEffect(() => {
    console.log('üîë CAPTCHA_SITE_KEY:', CAPTCHA_SITE_KEY);
    if (!CAPTCHA_SITE_KEY || CAPTCHA_SITE_KEY.trim() === '') {
      setCaptchaError('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sitekey');
    }
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ø—á–∏
  const reloadCaptcha = useCallback(() => {
    if (widgetId.current && window.smartCaptcha) {
      try {
        window.smartCaptcha.destroy(widgetId.current);
      } catch (e) {
        console.warn('Failed to destroy captcha widget', e);
      }
    }
    widgetId.current = null;
    setCaptchaToken('');
    setCaptchaError('');
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ø—á–∏
  const initializeCaptcha = useCallback(() => {
    if (!captchaContainerRef.current) {
      setCaptchaError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!window.smartCaptcha) {
      setCaptchaError('–°–∫—Ä–∏–ø—Ç –∫–∞–ø—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è');
      return;
    }

    if (!CAPTCHA_SITE_KEY || CAPTCHA_SITE_KEY.trim() === '') {
      setCaptchaError('–ö–ª—é—á sitekey –Ω–µ –∑–∞–¥–∞–Ω');
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞–ø—á—É
    reloadCaptcha();

    try {
      widgetId.current = window.smartCaptcha.render(captchaContainerRef.current, {
        sitekey: CAPTCHA_SITE_KEY,
        hl: 'ru',
        callback: (token) => {
          setCaptchaToken(token);
          setCaptchaError('');
        },
        'error-callback': (error) => {
          console.error('Yandex SmartCaptcha error:', error);
          setCaptchaError('–û—à–∏–±–∫–∞ –∫–∞–ø—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
      });
    } catch (error) {
      console.error('Failed to initialize SmartCaptcha:', error);
      setCaptchaError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ø—á—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    }
  }, [CAPTCHA_SITE_KEY, reloadCaptcha]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ø—á–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const load = () => {
      if (window.smartCaptcha) {
        initializeCaptcha();
      } else {
        // –ñ–¥—ë–º —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        window.addEventListener('smartcaptcha-ready', initializeCaptcha);
        // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
        setTimeout(() => {
          if (!widgetId.current) initializeCaptcha();
        }, 1000);
      }
    };

    load();

    return () => {
      window.removeEventListener('smartcaptcha-ready', initializeCaptcha);
      reloadCaptcha();
    };
  }, [initializeCaptcha, reloadCaptcha]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const sendFormData = async (formData) => {
    try {
      const response = await fetch(BACKEND_ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          ...formData,
          smartcaptcha_token: captchaToken
        }),
        credentials: 'same-origin'
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }

      const result = await response.json();

      if (result.status === 'success') {
        setSubmitSuccess(true);
        reset();
        setTimeout(() => setSubmitSuccess(false), 5000);
        reloadCaptcha(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–ø—á—É
        return true;
      } else {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
      if (error.message.includes('Failed to fetch')) {
        setSubmitError('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
      } else if (error.message.includes('JSON')) {
        setSubmitError('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
      } else {
        setSubmitError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      }
      return false;
    }
  };

  const onSubmit = async (data) => {
    setIsSubmitting(true);
    setSubmitError('');
    setSubmitSuccess(false);

    if (!captchaToken) {
      setCaptchaError('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç');
      setIsSubmitting(false);
      return;
    }

    await sendFormData(data);
    setIsSubmitting(false);
  };

  return (
    <section id="contact" className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
            </h2>
            <p className="text-xl text-gray-600">
              –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            </p>
          </div>

          <div className="bg-gray-50 rounded-xl p-8 md:p-12">
            {submitSuccess ? (
              <div className="text-center py-12">
                <div className="text-5xl mb-4 text-green-500">‚úì</div>
                <h3 className="text-2xl font-bold text-green-600 mb-2">
                  –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!
                </h3>
                <p className="text-gray-600">
                  –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                </p>
              </div>
            ) : (
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                {submitError && (
                  <div className="bg-red-50 border-l-4 border-red-200 rounded-lg p-4">
                    <p className="text-red-700 text-sm">{submitError}</p>
                  </div>
                )}

                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <label htmlFor="name" className="block text-gray-700 font-medium mb-2">
                      –ò–º—è *
                    </label>
                    <input
                      id="name"
                      {...register('name')}
                      autoComplete="name"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    />
                    {errors.name && (
                      <p className="mt-1 text-red-500 text-sm">{errors.name.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="email" className="block text-gray-700 font-medium mb-2">
                      Email *
                    </label>
                    <input
                      id="email"
                      type="email"
                      {...register('email')}
                      autoComplete="email"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="your@email.com"
                    />
                    {errors.email && (
                      <p className="mt-1 text-red-500 text-sm">{errors.email.message}</p>
                    )}
                  </div>
                </div>

                <div>
                  <label htmlFor="phone" className="block text-gray-700 font-medium mb-2">
                    –¢–µ–ª–µ—Ñ–æ–Ω *
                  </label>
                  <input
                    id="phone"
                    type="tel"
                    {...register('phone')}
                    autoComplete="tel"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+7 (___) ___-__-__"
                  />
                  {errors.phone && (
                    <p className="mt-1 text-red-500 text-sm">{errors.phone.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="message" className="block text-gray-700 font-medium mb-2">
                    –°–æ–æ–±—â–µ–Ω–∏–µ *
                  </label>
                  <textarea
                    id="message"
                    {...register('message')}
                    rows={5}
                    autoComplete="off"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ..."
                  />
                  {errors.message && (
                    <p className="mt-1 text-red-500 text-sm">{errors.message.message}</p>
                  )}
                </div>

                <div className="flex items-start">
                  <input
                    type="checkbox"
                    id="privacy"
                    required
                    className="mt-1 mr-2 h-5 w-5 text-blue-600 rounded focus:ring-blue-500 border-gray-300"
                  />
                  <label htmlFor="privacy" className="text-gray-600 text-sm">
                    –°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö *
                  </label>
                </div>

                <div className="mt-4">
                  <div ref={captchaContainerRef} className="captcha-container"></div>

                  {captchaError && (
                    <div className="mt-2">
                      <p className="text-red-500 text-sm mb-2">{captchaError}</p>
                      <button
                        type="button"
                        onClick={reloadCaptcha}
                        className="text-blue-500 text-sm underline hover:text-blue-700"
                      >
                        –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ø—á—É
                      </button>
                    </div>
                  )}
                </div>

                <GlassmorphicButton
                  type="submit"
                  variant="onLight"
                  size="large"
                  disabled={isSubmitting || !captchaToken}
                  className="w-full flex items-center justify-center mt-6"
                >
                  {isSubmitting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-gray-800" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      –û—Ç–ø—Ä–∞–≤–∫–∞...
                    </>
                  ) : (
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
                  )}
                </GlassmorphicButton>
              </form>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactForm;